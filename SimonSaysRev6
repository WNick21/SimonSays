/* CODE AS OF: 2/4/2020
THIS CODE FIXES: adds in tones.
The issue with the green LED turning on at the end of each sequnce
was fixed by removing the print statement below the disp function in playGame()
*/
#define RED 4 //Red LED
#define GREEN 5 //Green LED
#define BLUE 6 //BLUE LED
#define YELLOW 7 //Yellow LED

#define BUZZ 8 //PWM Buzzer

#define RSW 0 //Red Switch
#define GSW 1 //Green Switch
#define BSW 2 //Blue Switch
#define YSW 3 //Yellow Switch
const uint8_t LEDMask = 0b11110000;//Mask for LEDs
const uint8_t SwitchMask = 0b00001111;//Mask for Switches

int MyArray[16]; //This is an array of randomly generated numbers that make up the sequence
int i=0; //i used for counting
int j=0; //j used for counting
int PatternCount = 0; //Pattern count tracks how many times you correctly put the pattern in. 
                       //Must start at -2 to account for the program running before any input 


/*
LEDOut turns on LEDs
*/
void LEDOut(uint8_t RedLED, uint8_t GreenLED, uint8_t BlueLED, uint8_t YellowLED)
{
  uint8_t LEDOutput = 0b00000000;
  if (RedLED == 1) LEDOutput |= _BV(RED);//Turn on RED                    
  if (GreenLED == 1) LEDOutput |= _BV(GREEN);//Turn on GREEN                     
  if (BlueLED == 1) LEDOutput |= _BV(BLUE);//Turn on BLUE                     
  if (YellowLED == 1) LEDOutput |= _BV(YELLOW);//Turn on Yellow                      
  PORTD &= ~LEDMask; //Clear LEDs
  PORTD |= LEDOutput; //Turn on LEDs
}

/*
turnON displays which button has been pushed
*/
uint8_t turnON(uint8_t x)
{
  if (x == 8) LEDOut(0,0,0,1);
  else if (x == 4) LEDOut(0,0,1,0); //Both buttons pushed, all three LEDs on
  else if (x == 2) LEDOut(0,1,0,0); //One Button Pushed one LED on
  else if (x == 1) LEDOut(1,0,0,0); //One Button Pushed one LED on
  else LEDOut(0,0,0,0);//No Buttons, nothing on
}

/*
This function takes an input from the user and then displays which button has been pressed via LED
*/
uint8_t SwitchIn()
{
uint8_t  t = (~PIND & SwitchMask); //Because the switches are active LOW the input must be inverted
  turnON(t);//Show which LED has been turned on
 // return (~PIND & SwitchMask);
 toneOn(t);//The corrosponding tone plays
 return t;
}

/*
In the set up the port is configured to which pins will be input/outputs and which will have
pull-up resistors. Furthermore, it cycles through all the LEDs to ensure proper function
*/
void setup() {
  
    DDRD = 0b11110000; //Setting the Red, Green, and Blue LEDs to output. Switches 1 & 2 to inputs -- B G R SW2 SW1 X X X 
  PORTD = 0b00001111; //turn on the pull up resistors for the switches
  LEDOut(0,0,0,1);// Test Yellow
  delay(500);
  LEDOut(0,0,1,1);//Test BLUE
  delay(500);
  LEDOut(0,1,1,1);//Test GREEN
  delay(500);
  LEDOut(1,1,1,1);//Test RED
  delay(1000);
  LEDOut(0,0,0,0);
  int seed = 0;
  int hold = 0;
  while(hold != 1){ //holding to seed the random generator
    seed +=1; //Add to the seed counter
    LEDOut(0,1,0,1);//Nice pattern to let the player know to press a button
    delay(300);
    LEDOut(1,0,1,0);
    delay(300);
    if((SwitchIn() == 1 | 2 | 4 | 8)&&(SwitchIn() !=0)) hold = 1; 
   }
  srand(seed);//Seed the random function
  LEDOut(0,0,0,0);
  delay(1000);  // hold before game starts
  randomize(); //Create initial string of random numbers
}

/*
 * toneOn is used to turn the tones on. It takes and input which corrosponds to an LED or switch and then plays
 * The coorosponding tone. Its default state is to play no tone
 */
void toneOn(int x){
  
  if (x == 1) tone(9,310);// RED tone
  else if (x == 2) tone(9,415);//GREEN tone
  else if (x == 4) tone(9,209);//BLUE tone
  else if (x == 8) tone(9,252);//YELLOW tone
  else noTone(9);//Shhhhhhhhhhh
}

/*
disp is a function used to clean up the main loop. It turns on the LEDs in the correct sequence
that the player will have to memorize. It takes an input i which is the where you are in the
sequence currently and then displays all the steps leading up to and including that number
*/ 
void disp(int i){
  
  for (int a = 0; a <= i; a++){
  LEDOut(0,0,0,0); //turn All the LEDs off
  if (MyArray[a] == 1){LEDOut(1,0,0,0); toneOn(1); delay(500); } //Turn on RED LED, wait 500 miliseconds

  if (MyArray[a] == 2){ LEDOut(0,1,0,0); toneOn(2); delay(500);} //Turn on GREEN LED, wait 500 miliseconds

  if (MyArray[a] == 4){ LEDOut(0,0,1,0); toneOn(4); delay(500);} //Turn on BLUE LED, wait 500 miliseconds

  if (MyArray[a] == 8){ LEDOut(0,0,0,1); toneOn(8); delay(500);} //Turn on Yellow LED, wait 500 miliseconds
  LEDOut(0,0,0,0);
  toneOn(0);
  delay(200);
  }
}

/*
 * This function is used to create the random sequence of numbers that will be fed to the user
 */
int randomize(){

  PatternCount = 0; //Reset pattern count to 0
  
  for(int t=0;t<=15;t++){ //for loop to put numbers in array
   MyArray[t] = (rand()%4)+1; //Get multiples of 4
   if (MyArray[t] == 3){ //This is here to make the code easier
    MyArray[t] = 8;//Our code runs off bianary, so 3 had to be changed to 8 for continuity
   }

  }
  return MyArray;
}


/*
endGame is a function used to signify the game has ended by the user entering the
wrong sequence
IMPORTANT NOTE: Right now this code does nothing to actually reset the game
*/
void endGame(int PatternCount){
        tone(9,90);//End game noise
        LEDOut(1,0,1,0); // error pattern 
        delay(500);
        LEDOut(0,1,0,1);
        delay(500);
        noTone(9);//turn off noise
        for(int y = 0; y <= PatternCount-1; y++){//Displays how many times you input the correct sequence.
          LEDOut(1,1,1,1);
          delay(500);
          LEDOut(0,0,0,0);
          delay(500);
        }
        
        LEDOut(0,0,0,1);// Test Yellow
        delay(500);
        LEDOut(0,0,1,1);//Test BLUE
        delay(500);
        LEDOut(0,1,1,1);//Test GREEN
        delay(500);
        LEDOut(1,1,1,1);//Test RED
        delay(1000);
        LEDOut(0,0,0,0);
        randomize();

        int w = 1;
        while (w==1){ //Wait for red and yellow buttons to be pressed to start new game
          LEDOut(1,0,0,1);
          delay(500);
          LEDOut(0,0,0,0);
          delay(500);
          if((SwitchIn() == 1 | 2 | 4 | 8)&&(SwitchIn() !=0)){ //waiting to button to be pressed
            w = 0;
            playGame();
          }
        }
        delay(1000);
        return;
                
}
void playGame(){
   for (i = 0; i<=15; i++) { //This first for loop counts the "next" number in the sequnce
     LEDOut(0,0,0,0);//Turn off any LED that is on
     delay(500);//Wait a half second
     PatternCount += 1; //Add to the pattern count
     disp(i); //Show the sequence to the user
    
   int flag = 0; //flag used to hold the system for user input
    
    for(j = 0; j <=i; j++){ //For loop that takes in the user input

      int SCount = -1; //Variable used to keep the endgame function from starting early
     
      while (flag <= j ){ // Hold for user input
        
        int num = SwitchIn();//This forms a variable to store the switch inputs
        delay(50);//debounce
        
        if(num == MyArray[j]){ //If the user presses the right switch

          turnON(MyArray[j]);//Replaced testArray above with MyArray for same effect
          
          delay(500);// Hold the LED on for 500 miliseconds
          noTone(9);
          flag += 1; //Add to the flag, if flag > j go back to first for loop 
          
       }
        else if((SwitchIn() != MyArray[j]) && (SwitchIn() != 0)){//if the input isnt right and isnt equal to 0
          endGame(PatternCount);
        }

      }
    
    } 

  }
}

void loop() {
playGame(); //Play game

 
}
